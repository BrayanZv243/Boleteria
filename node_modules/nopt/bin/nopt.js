#!/usr/bin/env node
<<<<<<< HEAD
const nopt = require('../lib/nopt')
const path = require('path')
console.log('parsed', nopt({
  num: Number,
=======
var nopt = require('../lib/nopt')
var path = require('path')
var types = { num: Number,
>>>>>>> 96a33e777f461d23705a92babb66d2399584c38c
  bool: Boolean,
  help: Boolean,
  list: Array,
  'num-list': [Number, Array],
  'str-list': [String, Array],
  'bool-list': [Boolean, Array],
  str: String,
  clear: Boolean,
  config: Boolean,
  length: Number,
  file: path,
<<<<<<< HEAD
}, {
  s: ['--str', 'astring'],
=======
}
var shorthands = { s: ['--str', 'astring'],
>>>>>>> 96a33e777f461d23705a92babb66d2399584c38c
  b: ['--bool'],
  nb: ['--no-bool'],
  tft: ['--bool-list', '--no-bool-list', '--bool-list', 'true'],
  '?': ['--help'],
  h: ['--help'],
  H: ['--help'],
  n: ['--num', '125'],
  c: ['--config'],
  l: ['--length'],
  f: ['--file'],
<<<<<<< HEAD
}, process.argv, 2))
=======
}
var parsed = nopt(types
  , shorthands
  , process.argv
  , 2)

console.log('parsed', parsed)

if (parsed.help) {
  console.log('')
  console.log('nopt cli tester')
  console.log('')
  console.log('types')
  console.log(Object.keys(types).map(function M (t) {
    var type = types[t]
    if (Array.isArray(type)) {
      return [t, type.map(function (mappedType) {
        return mappedType.name
      })]
    }
    return [t, type && type.name]
  }).reduce(function (s, i) {
    s[i[0]] = i[1]
    return s
  }, {}))
  console.log('')
  console.log('shorthands')
  console.log(shorthands)
}
>>>>>>> 96a33e777f461d23705a92babb66d2399584c38c
